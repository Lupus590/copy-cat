--- MainThreadExecutor.java
+++ MainThreadExecutor.java
@@ -8,8 +8,6 @@
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.peripheral.IWorkMonitor;
 import dan200.computercraft.core.tracking.Tracking;
-import dan200.computercraft.shared.turtle.core.TurtleBrain;
-import net.minecraft.tileentity.TileEntity;
 
 import javax.annotation.Nonnull;
 import java.util.ArrayDeque;
@@ -21,14 +19,14 @@
  * them.
  *
  * This provides rate-limiting mechanism for tasks enqueued with {@link Computer#queueMainThread(Runnable)}, but also
- * those run elsewhere (such as during the turtle's tick - see {@link TurtleBrain#update()}). In order to handle this,
+ * those run elsewhere (such as during the turtle's tick - see {@code TurtleBrain#update()}). In order to handle this,
  * the executor goes through three stages:
  *
  * When {@link State#COOL}, the computer is allocated {@link ComputerCraft#maxMainComputerTime}ns to execute any work
  * this tick. At the beginning of the tick, we execute as many {@link MainThread} tasks as possible, until our
  * time-frame or the global time frame has expired.
  *
- * Then, when other objects (such as {@link TileEntity}) are ticked, we update how much time we've used using
+ * Then, when other objects (such as {@code TileEntity}) are ticked, we update how much time we've used using
  * {@link IWorkMonitor#trackWork(long, TimeUnit)}.
  *
  * Now, if anywhere during this period, we use more than our allocated time slice, the executor is marked as
