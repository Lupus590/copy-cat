--- HttpRequest.java
+++ HttpRequest.java
@@ -8,11 +8,9 @@
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.core.apis.IAPIEnvironment;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
-import dan200.computercraft.core.apis.http.options.Options;
-import dan200.computercraft.core.tracking.TrackingField;
+/*
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -27,6 +25,8 @@
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.timeout.ReadTimeoutException;
 import io.netty.handler.timeout.ReadTimeoutHandler;
+*/
+import cc.squiddev.cct.http.HttpHelpers;
 
 import java.net.InetSocketAddress;
 import java.net.URI;
@@ -48,43 +48,42 @@
 
     private static final int MAX_REDIRECTS = 16;
 
-    private Future<?> executorFuture;
-    private ChannelFuture connectFuture;
-    private HttpRequestHandler currentRequest;
-
     private final IAPIEnvironment environment;
 
     private final String address;
-    private final ByteBuf postBuffer;
-    private final HttpHeaders headers;
+    private final String postBuffer;
+    private final Map<String, String> headers;
     private final boolean binary;
 
     final AtomicInteger redirects;
 
-    public HttpRequest( ResourceGroup<HttpRequest> limiter, IAPIEnvironment environment, String address, String postText, HttpHeaders headers, boolean binary, boolean followRedirects )
+    public HttpRequest( ResourceGroup<HttpRequest> limiter, IAPIEnvironment environment, String address, String postText, Map<String, String> headers, boolean binary, boolean followRedirects )
     {
         super( limiter );
         this.environment = environment;
         this.address = address;
-        postBuffer = postText != null
-            ? Unpooled.wrappedBuffer( postText.getBytes( StandardCharsets.UTF_8 ) )
-            : Unpooled.buffer( 0 );
+        postBuffer = postText;
         this.headers = headers;
         this.binary = binary;
         redirects = new AtomicInteger( followRedirects ? MAX_REDIRECTS : 0 );
 
         if( postText != null )
         {
-            if( !headers.contains( HttpHeaderNames.CONTENT_TYPE ) )
+            if( !headers.containsKey( "content-type" ) )
             {
-                headers.set( HttpHeaderNames.CONTENT_TYPE, "application/x-www-form-urlencoded; charset=utf-8" );
+                headers.put( "content-type", "application/x-www-form-urlencoded; charset=utf-8" );
             }
 
+            /*
             if( !headers.contains( HttpHeaderNames.CONTENT_LENGTH ) )
             {
                 headers.set( HttpHeaderNames.CONTENT_LENGTH, postBuffer.readableBytes() );
             }
+            */
         }
+
+        if( !headers.containsKey( "accept-charset" ) ) headers.put( "accept-charset", "UTF-8" );
+        headers.put("x-requested-with", "XMLHttpRequest");
     }
 
     public IAPIEnvironment environment()
@@ -121,20 +120,23 @@
         }
     }
 
-    public void request( URI uri, HttpMethod method )
+    public void request( URI uri, String method )
     {
         if( isClosed() ) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit( () -> doRequest( uri, method ) );
+        doRequest( uri, method );
         checkClosed();
     }
 
-    private void doRequest( URI uri, HttpMethod method )
+    private void doRequest( URI uri, String method )
     {
         // If we're cancelled, abort.
         if( isClosed() ) return;
 
         try
         {
+            HttpHelpers.makeRequest(this, uri, method, headers, postBuffer);
+
+            /*
             boolean ssl = uri.getScheme().equalsIgnoreCase( "https" );
             InetSocketAddress socketAddress = NetworkUtils.getAddress( uri, ssl );
             Options options = NetworkUtils.getOptions( uri.getHost(), socketAddress );
@@ -192,14 +194,11 @@
                 .addListener( c -> {
                     if( !c.isSuccess() ) failure( c.cause() );
                 } );
+            */
 
             // Do an additional check for cancellation
             checkClosed();
         }
-        catch( HTTPRequestException e )
-        {
-            failure( e.getMessage() );
-        }
         catch( Exception e )
         {
             failure( "Could not connect" );
@@ -207,7 +206,7 @@
         }
     }
 
-    void failure( String message )
+    public void failure( String message )
     {
         if( tryClose() ) environment.queueEvent( FAILURE_EVENT, address, message );
     }
@@ -219,6 +218,7 @@
         {
             message = cause.getMessage();
         }
+        /*
         else if( cause instanceof TooLongFrameException )
         {
             message = "Response is too large";
@@ -227,6 +227,7 @@
         {
             message = "Timed out";
         }
+        */
         else
         {
             message = "Could not connect";
@@ -235,12 +236,12 @@
         failure( message );
     }
 
-    void failure( String message, HttpResponseHandle object )
+    public void failure( String message, HttpResponseHandle object )
     {
         if( tryClose() ) environment.queueEvent( FAILURE_EVENT, address, message, object );
     }
 
-    void success( HttpResponseHandle object )
+    public void success( HttpResponseHandle object )
     {
         if( tryClose() ) environment.queueEvent( SUCCESS_EVENT, address, object );
     }
@@ -249,16 +250,12 @@
     protected void dispose()
     {
         super.dispose();
-
-        executorFuture = closeFuture( executorFuture );
-        connectFuture = closeChannel( connectFuture );
-        currentRequest = closeCloseable( currentRequest );
     }
 
-    public static long getHeaderSize( HttpHeaders headers )
+    public static long getHeaderSize( Map<String, String> headers )
     {
         long size = 0;
-        for( Map.Entry<String, String> header : headers )
+        for( Map.Entry<String, String> header : headers.entrySet() )
         {
             size += header.getKey() == null ? 0 : header.getKey().length();
             size += header.getValue() == null ? 0 : header.getValue().length() + 1;
@@ -266,12 +263,12 @@
         return size;
     }
 
-    public ByteBuf body()
+    public String body()
     {
         return postBuffer;
     }
 
-    public HttpHeaders headers()
+    public Map<String, String> headers()
     {
         return headers;
     }
