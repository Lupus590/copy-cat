--- Websocket.java
+++ Websocket.java
@@ -9,11 +9,11 @@
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.core.apis.IAPIEnvironment;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
 import dan200.computercraft.core.apis.http.options.Options;
 import dan200.computercraft.shared.util.IoUtil;
+/*
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
@@ -29,6 +29,11 @@
 import io.netty.handler.codec.http.websocketx.WebSocketVersion;
 import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;
 import io.netty.handler.ssl.SslContext;
+*/
+import cc.squiddev.cct.js.WebsocketClient;
+import dan200.computercraft.core.apis.http.options.Action;
+import org.teavm.jso.typedarrays.Int8Array;
+import java.util.Map;
 
 import java.lang.ref.WeakReference;
 import java.net.InetSocketAddress;
@@ -52,16 +57,14 @@
     static final String CLOSE_EVENT = "websocket_closed";
     static final String MESSAGE_EVENT = "websocket_message";
 
-    private Future<?> executorFuture;
-    private ChannelFuture connectFuture;
     private WeakReference<WebsocketHandle> websocketHandle;
 
     private final IAPIEnvironment environment;
     private final URI uri;
     private final String address;
-    private final HttpHeaders headers;
+    private final Map<String, String> headers;
 
-    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, HttpHeaders headers )
+    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, Map<String, String> headers )
     {
         super( limiter );
         this.environment = environment;
@@ -117,7 +120,7 @@
     public void connect()
     {
         if( isClosed() ) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit( this::doConnect );
+        doConnect();
         checkClosed();
     }
 
@@ -128,6 +131,25 @@
 
         try
         {
+            WebsocketClient client = WebsocketClient.create(uri.toASCIIString());
+            client.setBinaryType("arraybuffer");
+            client.onOpen(e -> success(client, Action.ALLOW.toPartial().toOptions()));
+            client.onError(e -> ComputerCraft.log.error("Error " + e));
+            client.setOnMessage(e -> {
+                if (isClosed()) return;
+                Object converted;
+                if (e.isBinary()) {
+                    Int8Array array = Int8Array.create(e.getDataAsArray());
+                    byte[] contents = new byte[array.getLength()];
+                    for (int i = 0; i < contents.length; i++) contents[i] = array.get(i);
+                    converted = contents;
+                } else {
+                    converted = e.getDataAsString();
+                }
+                environment.queueEvent(MESSAGE_EVENT, address, converted, true);
+            });
+            client.onClose(e -> close(e.getCode(), e.getReason()));
+            /*
             boolean ssl = uri.getScheme().equalsIgnoreCase( "wss" );
             InetSocketAddress socketAddress = NetworkUtils.getAddress( uri, ssl );
             Options options = NetworkUtils.getOptions( uri.getHost(), socketAddress );
@@ -168,14 +190,11 @@
                 .addListener( c -> {
                     if( !c.isSuccess() ) failure( c.cause().getMessage() );
                 } );
+            */
 
             // Do an additional check for cancellation
             checkClosed();
         }
-        catch( HTTPRequestException e )
-        {
-            failure( e.getMessage() );
-        }
         catch( Exception e )
         {
             failure( "Could not connect" );
@@ -183,7 +202,7 @@
         }
     }
 
-    void success( Channel channel, Options options )
+    void success( WebsocketClient channel, Options options )
     {
         if( isClosed() ) return;
 
@@ -214,9 +233,6 @@
     {
         super.dispose();
 
-        executorFuture = closeFuture( executorFuture );
-        connectFuture = closeChannel( connectFuture );
-
         WeakReference<WebsocketHandle> websocketHandleRef = websocketHandle;
         WebsocketHandle websocketHandle = websocketHandleRef == null ? null : websocketHandleRef.get();
         IoUtil.closeQuietly( websocketHandle );
